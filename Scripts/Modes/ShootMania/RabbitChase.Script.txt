
#Extends "Modes/ShootMania/Base/ModeShootmania.Script.txt"

#Const  CompatibleMapTypes  "MeleeArena"
#Const  Version             "2.3.0"
#Const  ScriptName          "Modes/ShootMania/RabbitChase.Script.txt"

#Const C_HudModulePath "Nadeo/ShootMania/Melee/Hud.Module.Gbx"
#Const C_RabbitStatusLayerName "RabbitStatus"
#Const C_RabbitMarkerLayerName "RabbitMarker"

#Include "MathLib" as Math
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib
#Include "Libs/Nadeo/Interface.Script.txt" as Interface

#Setting S_TimeLimit            600     as _("Time Limit") ///< Length of the match in seconds
#Setting S_RabbitArmor          3       as _("Rabbit Armor Count") ///< Number of Armors for the Rabbit
#Setting S_DynamicRabbitArmor   False   as _("Dynamic Rabbit Armor") ///< Rabbit Armor scales with player count. When enabled, Rabbit Armor setting is used as a maximum.
#Setting S_RabbitMarker         True    as _("Rabbit Marker") ///< Displays a marker above the Rabbit
#Setting S_HunterArmor          1       as _("Hunter Armor Count") ///< Number of Armors for the Hunter
#Setting S_DisablePointsLoss    False   as _("Disable Points Loss") ///< Points are not lost when getting hit
#Setting S_OnlyRandomRabbits    False   as _("Only Random Rabbits") ///< The next Rabbit is always chosen at random
#Setting S_InstagibMode         False   as _("Instagib Mode") ///< Forces lasers for all players



#Struct K_RabbitInfo {
    Ident RabbitPlayerId;
    Ident LastHitRabbitPlayerId;
}


***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***


***Match_Settings***
***
MB_Settings_UseDefaultHud = False;
MB_Settings_UseDefaultTimer = False;
***


***Match_Rules***
***
ModeInfo::SetName("Rabbit Chase");
ModeInfo::SetType("Hunters vs Rabbit");
ModeInfo::SetRules(
"""Hunt to become the rabbit, then eliminate the hunters to survive.

Gain 1 point for landing a hit, lose 1 point for getting hit.

The match ends when the time runs out.""");
ModeInfo::SetStatusMessage(_("Hunt the rabbit"));
***


***Match_LoadHud***
***
Hud_Load(C_HudModulePath);
if (Hud != Null && Hud.ScoresTable != Null) {
    Hud.ScoresTable.Scores_Sort(CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints);
}
***


***Match_SpawnScreen***
***
SpawnScreen::CreateScores("Score.RoundPoints");
***


***Match_StartServer***
***
UseClans = False;
UseForcedClans = False;
Scores::SaveInScore(Scores::C_Points_Map);
Scores::EnablePlayerNegativePoints(True, True, True);
Interface::CreateRank();
Layers::Create(C_RabbitStatusLayerName, RabbitStatusML(Null));
Layers::Create(C_RabbitMarkerLayerName, RabbitMarkerML());
***


***Match_InitMap***
***
declare Ident[] SpawnsList;
declare Ident[] PreviousRabbitsList;
declare K_RabbitInfo RabbitInfo;
***


***Match_StartMap***
***
SpawnsList = Ident[];
PreviousRabbitsList = Ident[];

if (Hud != Null && Hud.ScoresTable != Null) {
    declare Text ScoreTableFooter = "Time limit - ";
    if (S_TimeLimit >= 0) {
        ScoreTableFooter ^= TextLib::TimeToText(S_TimeLimit * 1000);
    } else {
        ScoreTableFooter ^= "Unlimited";
    }
    Hud.ScoresTable.SetFooterText(TextLib::Compose(ScoreTableFooter));
}

StartTime = Now;
if (S_TimeLimit > 0) {
    EndTime = StartTime + (S_TimeLimit * 1000);
} else {
    EndTime = -1;
}

// For Development
/*
Users_DestroyAllFakes();
Users_CreateFake("fakeplayer_05", 0);
Users_CreateFake("fakeplayer_06", 0);
*/

Layers::SetType(C_RabbitMarkerLayerName, CUILayer::EUILayerType::Markers);
Layers::Attach(C_RabbitStatusLayerName);
***


***Match_PlayLoop_HandleEvents***
***
foreach (Event in PendingEvents) {
    if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
        if (Event.VictimEntity != Null && (Event.VictimEntity is CSmPlayer)) {
            declare CSmPlayer VictimPlayer <=> (Event.VictimEntity as CSmPlayer);
            if (!S_DisablePointsLoss) {
                Scores::RemovePlayerRoundPoints(VictimPlayer.Score, 1);
            }
            if (VictimPlayer.Id == RabbitInfo.RabbitPlayerId) {
                RabbitInfo.RabbitPlayerId = NullId;
            }
        }
        Events::Valid(Event);
    } else if (Event.Type == CSmModeEvent::EType::OnHit) {
        if (Event.ShooterEntity != Null && (Event.ShooterEntity is CSmPlayer)
            && Event.VictimEntity != Null && (Event.VictimEntity is CSmPlayer)
            && Event.ShooterEntity.Id != Event.VictimEntity.Id && (Event.ShooterEntity.Id == RabbitInfo.RabbitPlayerId || Event.VictimEntity.Id == RabbitInfo.RabbitPlayerId)) {
            declare CSmPlayer ShooterPlayer <=> (Event.ShooterEntity as CSmPlayer);
            if (S_InstagibMode) {
                declare CSmPlayer VictimPlayer <=> (Event.VictimEntity as CSmPlayer);
                VictimPlayer.Armor = 0;
            }
            Scores::AddPlayerRoundPoints(ShooterPlayer.Score, 1);
            if (Event.VictimEntity.Id == RabbitInfo.RabbitPlayerId) {
                RabbitInfo.LastHitRabbitPlayerId = Event.ShooterEntity.Id;
            }
            Events::Valid(Event);
        } else {
            Events::Invalid(Event);
        }
    } else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
        if (Event.Player.Id == RabbitInfo.RabbitPlayerId) {
            RabbitInfo.RabbitPlayerId = NullId;
        }
        if (!S_DisablePointsLoss) {
            Scores::RemovePlayerRoundPoints(Event.Player.Score, 1);
        }
        Events::Valid(Event);
    } else {
        Events::Valid(Event);
    }
}
***


***Match_PlayLoop_SpawnPlayers***
***
foreach (Player in Players) {
    if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate) {
        if (SpawnsList.count == 0) {
            foreach (MapLandmark in MapLandmarks_PlayerSpawn) {
                SpawnsList.add(MapLandmark.Id);
            }
        }
        declare Ident SpawnId = NullId;
        if (SpawnsList.count == 1) {
            SpawnId = SpawnsList[0];
        } else if (SpawnsList.count > 1) {
            SpawnId = SpawnsList[Math::Rand(0, SpawnsList.count - 1)];
        }
        SM::Spawn(Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn);

        if (S_InstagibMode) {
            SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
            Player.AmmoGain = 2.0;
        } else {
            Player.AmmoGain = 1.0;  // Default reload
        }
        if (Player.Id == RabbitInfo.RabbitPlayerId) {
            SetRabbit(Player, GetRabbitMaxArmor(Players.count));
        } else {
            SetHunter(Player);
        }
        SpawnsList.remove(SpawnId);
    }
}
***


***Match_PlayLoop_ManageRabbitSelection***
***
if (RabbitInfo.RabbitPlayerId != NullId
    && (!Players.existskey(RabbitInfo.RabbitPlayerId) || Players[RabbitInfo.RabbitPlayerId].RequestsSpectate)) {
    RabbitInfo.RabbitPlayerId = NullId;
}

if (RabbitInfo.RabbitPlayerId == NullId) {
    // Choose hunter who last hit the rabbit
    if (!S_OnlyRandomRabbits
        && RabbitInfo.LastHitRabbitPlayerId != NullId
        && Players.existskey(RabbitInfo.LastHitRabbitPlayerId)
        && Players[RabbitInfo.LastHitRabbitPlayerId].SpawnStatus == CSmPlayer::ESpawnStatus::Spawned
        && !Players[RabbitInfo.LastHitRabbitPlayerId].RequestsSpectate) {
        RabbitInfo.RabbitPlayerId = Players[RabbitInfo.LastHitRabbitPlayerId].Id;
        RabbitInfo.LastHitRabbitPlayerId = NullId;
    // Choose at random from all valid players
    } else {
        declare Ident[] EligiblePlayerIds;
        // First try to find a player who hasnt been rabbit yet
        foreach (Player in Players) {
            if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.RequestsSpectate && !PreviousRabbitsList.exists(Player.Id)) {
                EligiblePlayerIds.add(Player.Id);
            }
        }
        // If not, then look through all available players. This could lead to
        // a situation where a player is skipped because they were
        // respawning, but I dont think that matters too much right now.
        if (EligiblePlayerIds.count == 0) {
            PreviousRabbitsList.clear();
            foreach (Player in Players) {
                if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.RequestsSpectate) {
                    EligiblePlayerIds.add(Player.Id);
                }
            }
        }
        if (EligiblePlayerIds.count > 0) {
            RabbitInfo.RabbitPlayerId = EligiblePlayerIds[Math::Rand(0, EligiblePlayerIds.count - 1)];
            RabbitInfo.LastHitRabbitPlayerId = NullId;
        }
    }

    if (RabbitInfo.RabbitPlayerId != NullId && Players.existskey(RabbitInfo.RabbitPlayerId)) {
        SetRabbit(Players[RabbitInfo.RabbitPlayerId], GetRabbitMaxArmor(Players.count));
        if (!PreviousRabbitsList.exists(RabbitInfo.RabbitPlayerId)) {
            PreviousRabbitsList.add(RabbitInfo.RabbitPlayerId);
        }
        Layers::Update(C_RabbitStatusLayerName, RabbitStatusML(Players[RabbitInfo.RabbitPlayerId]));
    } else {
        Layers::Update(C_RabbitStatusLayerName, RabbitStatusML(Null));
    }
}
***


***Match_PlayLoop***
***
+++Match_PlayLoop_HandleEvents+++
+++Match_PlayLoop_SpawnPlayers+++
+++Match_PlayLoop_ManageRabbitSelection+++

if (S_TimeLimit > 0 && Now > EndTime) {
    SM::UnspawnAllPlayers(); // Makes sure Players despawn in time.
    Message::SendBigMessage(_("Time limit reached"), 2000, 3, CUIConfig::EUISound::Silence, 0);
    MB_StopMatch();
}
***


***Match_EndMap***
***
Layers::Detach(C_RabbitMarkerLayerName);
UIManager.UIAll.MarkersXML = "";
EndTime = -1;
MB_Sleep(2000);
SM::UnspawnAllPlayers();
Scores::EndRound();
declare BestPlayerScore <=> Scores::GetBestPlayerMapPoints(Scores::C_Order_Descending);
if (BestPlayerScore != Null) {
    Scores::SetPlayerWinner(BestPlayerScore);
} else {
    Scores::ResetPlayerWinner();
}
***


Void SetHunter(CSmPlayer _Player) {
    _Player.ForceColor = <0.9,0.33,0.0>;
    _Player.ArmorMax = Math::Max(100, 100 * S_HunterArmor);
    _Player.Armor = _Player.ArmorMax;
}

Void SetRabbit(CSmPlayer _Player, Integer _ArmorMax) {
    declare netwrite Text RabbitPlayerLogin for Teams[0];
    RabbitPlayerLogin = _Player.User.Login;
    _Player.ForceColor = <0.01,0.01,0.01>;
    _Player.ArmorMax = _ArmorMax;
    _Player.Armor = _Player.ArmorMax;
    _Player.Stamina = _Player.StaminaMaxValue;

    //Rabbit Marker
    if (S_RabbitMarker) {
        Layers::Attach(C_RabbitMarkerLayerName);
        UIManager.UIAll.MarkersXML = """<marker playerid="{{{_Player.Id}}}" manialinkframeid="Frame_RabbitMarker"/>""";
    }
    else {
        UIManager.UIAll.MarkersXML = "";
    }

    SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket));
    if (S_InstagibMode) {
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Laser, GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser));
    }

    declare Text Message = TextLib::Compose(_("$<%1$> is now the Rabbit"), _Player.User.Name);
    Message::SendBigMessage(Message, 3000, 2, CUIConfig::EUISound::Notice, 0);
}

Integer GetRabbitMaxArmor(Integer _PlayerCount) {
    declare Integer ArmorValue = 0;
    if (S_DynamicRabbitArmor) {
        ArmorValue = Math::Clamp(100 * (_PlayerCount / 3), 100, 100 * S_RabbitArmor);
    } else {
        ArmorValue = Math::Max(100, 100 * S_RabbitArmor);
    }
    return ArmorValue;
}

Text RabbitStatusML(CSmPlayer _Player) {
    declare Text RabbitName = "None";
    if (_Player != Null) {
        RabbitName = _Player.User.Name;
    }
    declare Text MLText = """<label posn="0 -65" halign="center" style="TextStaticVerySmall" text="$sCurrent Rabbit: $ccc$<{{{RabbitName}}}$>" />
    """;
    return MLText;
}

Text RabbitMarkerML() {
    return """
    <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3">
		<frame id="Frame_RabbitMarker" scale="0.6" pos="0, -100">
			<frame id="Frame_RabbitHead">
                <label pos="0.5 -5" z-index="0" size="5 5" text="3" halign="center" valign="center" textsize="3" textcolor="000" rot="90" textfont="BiryaniDemiBold"/>
                <label pos="1 -2.5" z-index="0" size="5 5" text="=" textcolor="F00" rot="90" halign="center" valign="center" textfont="BiryaniDemiBold" textsize="6"/>
                <label pos="-2 0" z-index="0" size="15 15" text="" halign="center" valign="center" textsize="10" rot="160" id="Label_EarLeft"/>
                <label pos="2 0" z-index="0" size="15 15" text="" halign="center" valign="center" textsize="10" rot="-160" id="Label_EarRight"/>
                <label pos="0 -4" z-index="0" size="15 15" text="" halign="center" valign="center" textsize="5" id="Label_Head"/>
			</frame>
			<label pos="0 -10" z-index="0" size="30 5" text="UserName" halign="center" valign="center" id="Label_RabbitName"/>
			<quad pos="0 -10" z-index="0" size="35 5" bgcolor="555555AA" halign="center" valign="center"/>
		</frame>
        <script><!--
        main() {
            declare CMlLabel Label_RabbitName <=> (Page.GetFirstChild("Label_RabbitName") as CMlLabel);
            declare CMlLabel Label_EarLeft <=> (Page.GetFirstChild("Label_EarLeft") as CMlLabel);
            declare CMlLabel Label_EarRight <=> (Page.GetFirstChild("Label_EarRight") as CMlLabel);
            declare CMlLabel Label_Head <=> (Page.GetFirstChild("Label_Head") as CMlLabel);
            declare CMlFrame Frame_RabbitMarker <=> (Page.GetFirstChild("Frame_RabbitMarker") as CMlFrame);
            while (True) {
                yield;
                declare netread Text RabbitPlayerLogin for Teams[0];
                declare Text PreviousLogin;
                if (PreviousLogin != RabbitPlayerLogin) {
                    foreach (Player in Players) {
                        if (Player.User.Login == RabbitPlayerLogin) {
                            Label_RabbitName.Value = RabbitPlayerLogin;
                            /*
                            Rabbit face coloring stuff. Can leave it or take it. idk

                            Label_EarLeft.TextColor = Player.User.Color;
                            Label_EarRight.TextColor = Player.User.Color;
                            Label_Head.TextColor = Player.User.Color;
                            */
                        }
                        PreviousLogin = RabbitPlayerLogin;
                    }
                }
            }
        }
        --></script>
	</manialink>
    """;
}
